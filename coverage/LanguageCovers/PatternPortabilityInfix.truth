//
// Portability Infixes are used to mark an area of a pattern
// in a way that allows conforming data applied to subtypes
// to be recognized by their bases. Hence, it establishes data 
// "portability" between types and their bases.
//
// Portability infixes are the less desirable way of establishing
// a covariant compatibility relationship between the patterns
// associated with a type, and it's bases. Portability infixes are 
// used when each valid input to a pattern associated with a 
// type must *contain* a valid input to it's bases, but is not a 
// valid input itself.
//
// This example demonstrates a single portability infix being
// used within a pattern.
// 

Numeric
Integer : Numeric
/\d+/ : Integer

SignedInteger : Integer
/(+|-)< : Integer>/ : SignedInteger

Class
	A : Integer
	B : Integer

SubClass : Class
	A : SignedInteger
	B : SignedInteger

SubSubClass : SubClass
	A : +2
	B : -10
