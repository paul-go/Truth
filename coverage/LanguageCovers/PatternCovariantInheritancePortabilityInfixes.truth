//
// This example demonstrates the use of self-referencing
// portability infixes in order to achieve a cleanly covariant
// expansion of a pattern matching a specific fact, through
// it's inheritance hierarchy.
//
// Note that a reference to a fact in a portability infix actually
// means: "the pattern that matches this fact in this scope".
//

ClassL1
	Number
	/\d+ : Number
	
ClassL2 : ClassL1
	// Although this Number declaration is still a fresh fact, 
	// technically it derives from the Number fact defined in
	// ClassL1. 
	//
	// The "implicit types can't be used as bases" rule 
	// still applies to annotations within infixes (see below), 
	// so if we want to extend the set of of names that can
	// match the Number fact within this scope, we need
	// to bring "Number" into the scope so that it's found
	// by visible to both the infix and the annotation.
	Number
	/< : Number>(\.\d+)? : Number

ClassL3 : ClassL2
	Number
	/(\+|-)< : Number> : Number

// Below:
// We can't change this behavior so that the scope of the 
// infix is actually the scope of the pattern's annotations, 
// even though technically this could add some consistency
// with the way declarations behave.
